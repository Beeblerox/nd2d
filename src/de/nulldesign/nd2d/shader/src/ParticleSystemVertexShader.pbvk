/*
 *
 *  ND2D - A Flash Molehill GPU accelerated 2D engine
 *
 *  Author: Lars Gerckens
 *  Copyright (c) nulldesign 2011
 *  Repository URL: http://github.com/nulldesign/nd2d
 *
 *
 *  Licence Agreement
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 * /
 */

<languageVersion : 1.0;>
vertex kernel defaultshader
<
    namespace : "ND2D_Shader";
    vendor : "nulldesign";
    version : 1;
>
{
    parameter float4x4 objectToClipSpaceTransform;
    parameter float4 currentTime;
    parameter float4 gravity;
    
    input vertex float4 vertexPosition
    <
        id : "PB3D_POSITION";
    >;

	input vertex float4 velocity
    <
        id : "PB3D_TARGET_POSITION";
    >;

	input vertex float4 miscParams
    <
        id : "PB3D_NORMAL";
    >;
    
	input vertex float4 endColor
    <
        id : "PB3D_TARGET_NORMAL";
    >;
    
    input vertex float4 startColor
    <
        id : "PB3D_COLOR";
    >;

    output vertex float4 color
    <
        id : "PB3D_COLOR";
    >;
    
    output float4 vertexClipPosition;

    void evaluateVertex()
    {
        // we've hidden the birth and life in the normal
        float birth = miscParams.x;
        float life = miscParams.y;
        float startSize = miscParams.z;
        float endSize = miscParams.w;
        
        float progress = clamp(fract((currentTime.x - birth) / life), 0.0, 1.0);
        
        float4 p = float4(progress, progress, progress, 1.0);
        
        float4 tmpVelocity = velocity;
        tmpVelocity += gravity * p;
        tmpVelocity *= p;
        
        // bug??? vertexClipPosition = vertexPosition * objectToClipSpaceTransform; + tmpVelocity doesnt work
        
        float size = startSize * (1.0 - progress) + endSize * progress;
        
        float4 tmpVertexPos = vertexPosition;

        // initial size
        tmpVertexPos.x *= size;
        tmpVertexPos.y *= size;

        // initial position
        tmpVertexPos.x += velocity.z;
        tmpVertexPos.y += velocity.w;

        // position delta
        tmpVertexPos.x += tmpVelocity.x;
        tmpVertexPos.y += tmpVelocity.y;
        
        tmpVertexPos *= objectToClipSpaceTransform;
        
        vertexClipPosition = tmpVertexPos;

        // mix is broken at the moment
        //float4 tmpColor = mix(startColor, endColor, p);
		
		float4 tmpColor = float4(0.0, 0.0, 0.0, 0.0);
		
        tmpColor.r = startColor.r * (1.0 - progress) + endColor.r * progress;
        tmpColor.g = startColor.g * (1.0 - progress) + endColor.g * progress;
        tmpColor.b = startColor.b * (1.0 - progress) + endColor.b * progress;
        tmpColor.a = startColor.a * (1.0 - progress) + endColor.a * progress;
        
        color = tmpColor;
    }
}