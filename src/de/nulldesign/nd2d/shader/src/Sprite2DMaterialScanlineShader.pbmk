/*
 * ND2D - A Flash Molehill GPU accelerated 2D engine
 *
 * Author: Lars Gerckens
 * Copyright (c) nulldesign 2011
 * Repository URL: http://github.com/nulldesign/nd2d
 * Getting started: https://github.com/nulldesign/nd2d/wiki
 *
 *
 * Licence Agreement
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

<languageVersion : 1.0;>
material kernel texture
<
    namespace : "ND2D_Shader";
    vendor : "nulldesign";
    version : 1;
>
{
    input vertex float2 uvCoord
    <
        id : "PB3D_UV";
    >;

    input vertex float4 clipPosition
    <
        id : "PB3D_CLIP_POSITION";
    >;

    parameter float2 uvOffset;
    parameter float sceneHeight;
    parameter float seed;

    interpolated float4 interpolatedUV;
    interpolated float4 interpolatedPosition;

    void evaluateVertex()
    {
        interpolatedUV = float4(uvCoord.x + uvOffset.x, uvCoord.y + uvOffset.y, 0.0, 0.0);
        // add half of the screen height...
        interpolatedPosition = float4(clipPosition.x, clipPosition.y * sceneHeight * 0.5 + seed, 0.0, 1.0);
    }

    input image4 textureImage;
    parameter float4 color;

    output float4 result;

    void evaluateFragment()
    {
        float4 texel = sample(textureImage,
                              float2(interpolatedUV.x, interpolatedUV.y),
                              PB3D_2D | PB3D_MIPNEAREST | PB3D_CLAMP);

        // mod is broken at the moment...
        //float alphaValue = mod(interpolatedPosition.y, 3.0);

        float y = interpolatedPosition.y;
        float x = 3.0;
        float alphaValue = y - x * floor(y / x);

        result = float4(texel.r * color.r / texel.a,
                        texel.g * color.g / texel.a,
                        texel.b * color.b / texel.a,
                        texel.a * color.a * alphaValue);
    }
}