module_fragment_program particlesystem

    metadata
        namespace const(string, "ND2D_Shader")
        vendor const(string, "nulldesign")
        version const(int, 1)
    end_metadata
    
    transformations
        SCF INTOSSA OPT(DCE* {APR DCE*}*)
    end_transformations
    
    globals
        input image image-4 textureImage
        input vertex float-4 color
            metadata
                id const(string, "PB3D_COLOR")
            end_metadata
        input vertex float-4 uvCoord
            metadata
                id const(string, "PB3D_UV")
            end_metadata
        interpolated float-4 interpolatedColor
            metadata
                id const(string, "_1_interpolatedColor")
            end_metadata
        interpolated float-4 interpolatedUV
            metadata
                id const(string, "_0_interpolatedUV")
            end_metadata
        output fragment float-4 result
    end_globals
    
    functions
        external_function void evaluateFragment()
            body
                basic_block entry%A !! outlets(basic%A)
                    texel-0 = allocNonSSA type(float-4) : float-4
                    jump block(basic%A) : void
                end_basic_block
                basic_block basic%A !! inlets(entry%A) outlets(exit%A)
                    interpolatedUVElem%A-0 = extractVE interpolatedUV, const(int, 0) : float
                    interpolatedUVElem%B-0 = extractVE interpolatedUV, const(int, 1) : float
                    _anonVec%A-0 = makeFloatVector interpolatedUVElem%A-0, interpolatedUVElem%B-0 : float-2
                    _LD_texel-1 = sampleLinear textureImage, _anonVec%A-0 : float-4
                    _LD_texelElem%A-0 = extractVE _LD_texel-1, const(int, 0) : float
                    interpolatedColorElem%A-0 = extractVE interpolatedColor, const(int, 0) : float
                    _mulResult%A-0 = mul _LD_texelElem%A-0, interpolatedColorElem%A-0 : float
                    _LD_texelElem%B-0 = extractVE _LD_texel-1, const(int, 1) : float
                    interpolatedColorElem%B-0 = extractVE interpolatedColor, const(int, 1) : float
                    _mulResult%B-0 = mul _LD_texelElem%B-0, interpolatedColorElem%B-0 : float
                    _LD_texelElem%C-0 = extractVE _LD_texel-1, const(int, 2) : float
                    interpolatedColorElem%C-0 = extractVE interpolatedColor, const(int, 2) : float
                    _mulResult%C-0 = mul _LD_texelElem%C-0, interpolatedColorElem%C-0 : float
                    _LD_texelElem%D-0 = extractVE _LD_texel-1, const(int, 3) : float
                    interpolatedColorElem%D-0 = extractVE interpolatedColor, const(int, 3) : float
                    _mulResult%D-0 = mul _LD_texelElem%D-0, interpolatedColorElem%D-0 : float
                    _LD_result-1 = makeFloatVector _mulResult%A-0, _mulResult%B-0, _mulResult%C-0, _mulResult%D-0 : float-4
                    jump block(exit%A) : void
                end_basic_block
                basic_block exit%A !! inlets(basic%A)
                    moveToNonSSA _LD_result-1, result : void
                    ret : void
                end_basic_block
            end_body
        end_external_function
    end_functions
    
end_module_fragment_program

